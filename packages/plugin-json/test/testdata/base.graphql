type Base @amplienceContentType {
  text: String!
    @amplienceText(
      minLength: 2
      maxLength: 4
      format: markdown
      pattern: "/[\\w\\-]+"
      examples: ["one example", "another example"]
    )
  optionalText: String
  textList: [String!]! @amplienceList(minItems: 1, maxItems: 10)
  integer: Int! @amplienceNumber(minimum: 0, maximum: 10)
  optionalInteger: Int
  float: Float! @amplienceNumber(minimum: 0, maximum: 10)
  optionalFloat: Float
  boolean: Boolean!
  optionalBoolean: Boolean
  constString: String @amplienceConst(item: "const")
  constArray: [String!]! @amplienceConst(items: ["this", "is", "const"])
  image: AmplienceImage!
  video: AmplienceVideo!
  enum: Enum
  a: A
  bs: [B]
  inlined: Inlined
  union: Union
  linkedA: A @amplienceLink
  referencedB: B @amplienceReference
}

enum Enum {
  a
  b
}

union Union = A | B

type A @amplienceContentType {
  a: String!
}

type B @amplienceContentType {
  b: String!
}

type Inlined {
  inlined: String!
}

type Localized @amplienceContentType {
  string: String @amplienceLocalized
  boolean: Boolean @amplienceLocalized
  int: Int @amplienceLocalized
  float: Float @amplienceLocalized
  image: AmplienceImage @amplienceLocalized
  video: AmplienceVideo @amplienceLocalized
}
